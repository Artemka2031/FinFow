# -*- coding: utf-8 -*-
# FinFlow/src/bot/routers/transfer/transfer_router.py
"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–∏–ø–∞ ¬´–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ¬ª.

–°—Ü–µ–Ω–∞—Ä–∏–π:
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.
2. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–±–µ–∑ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ).
3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π –∫–æ—à–µ–ª—ë–∫ ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.
4. –ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

–ú–∞—Ä—à—Ä—É—Ç—ã —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π ¬´–ù–∞–∑–∞–¥¬ª, –ø–æ—ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–∏
`_get_choose_*_wallet_message` –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å —Ç–µ–º–∏ –∂–µ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏, —á—Ç–æ –∏ –ø—Ä–µ–∂–¥–µ.
"""

from __future__ import annotations

from typing import Final, Union

from aiogram import Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.bot.keyboards.wallet_kb import create_wallet_keyboard, WalletCallback
from src.bot.state import OperationState
from src.bot.utils.legacy_messages import track_messages
from src.core.logger import configure_logger
from src.db import get_async_session, get_wallet


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HELPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _to_markup(
        kb: Union[InlineKeyboardBuilder, InlineKeyboardMarkup]
) -> InlineKeyboardMarkup:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç builder –∏–ª–∏ –≥–æ—Ç–æ–≤—É—é —Ä–∞–∑–º–µ—Ç–∫—É –∫ InlineKeyboardMarkup."""
    return kb.as_markup() if isinstance(kb, InlineKeyboardBuilder) else kb


router: Final = Router()
log = configure_logger(prefix="TRANSFER", color="magenta", level="INFO")


async def _get_choose_from_wallet_message(
        cb: CallbackQuery, state: FSMContext
) -> tuple[str, InlineKeyboardBuilder]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ *–∏—Å—Ö–æ–¥–Ω–æ–≥–æ* –∫–æ—à–µ–ª—å–∫–∞."""
    async with get_async_session() as session:
        kb = await create_wallet_keyboard(session, state=state)
    return (
        "üü¢ –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ—à–µ–ª—ë–∫</b>, –æ—Ç–∫—É–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ:",
        kb,
    )


async def _get_choose_to_wallet_message(
        cb: CallbackQuery, state: FSMContext
) -> tuple[str, InlineKeyboardBuilder]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ *—Ü–µ–ª–µ–≤–æ–≥–æ* –∫–æ—à–µ–ª—å–∫–∞, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π."""
    async with get_async_session() as session:
        data = await state.get_data()
        from_wallet = data.get("from_wallet")
        kb = await create_wallet_keyboard(session, state=state, exclude_wallet=from_wallet)
    return (
        "üîµ –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ—à–µ–ª—ë–∫</b>, –∫—É–¥–∞ –ø–æ—Å—Ç—É–ø—è—Ç –¥–µ–Ω—å–≥–∏:",
        kb,
    )


def _get_enter_amount_message() -> str:
    """–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞."""
    return "üí∞ –í–≤–µ–¥–∏—Ç–µ <b>—Å—É–º–º—É</b> –ø–µ—Ä–µ–≤–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CHOOSE FROM WALLET ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(WalletCallback.filter(), OperationState.choosing_from_wallet)
@track_messages
async def set_from_wallet(
        cb: CallbackQuery,
        state: FSMContext,
        bot: Bot,
        callback_data: WalletCallback,
) -> None:
    wallet_id = callback_data.wallet_id
    async with get_async_session() as session:
        wallet = await get_wallet(session, wallet_id)
        wallet_number = wallet.wallet_number if wallet else wallet_id
    await state.update_data(
        from_wallet=wallet_id,
        state_history=[OperationState.choosing_from_wallet.state],
    )
    log.info("User %s: from_wallet=%s", cb.from_user.id, wallet_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    confirm_text = f"–í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª—ë–∫, <b>–æ—Ç–∫—É–¥–∞</b> –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ:\n‚úÖ  <b>{wallet_number}</b>"
    await cb.message.edit_text(confirm_text, reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    text, kb_builder = await _get_choose_to_wallet_message(cb, state)
    text = text.format(from_wallet=wallet_number)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º wallet_number
    new_message = await bot.send_message(
        cb.message.chat.id, text, reply_markup=_to_markup(kb_builder)
    )
    await state.update_data(to_wallet_message_id=new_message.message_id)

    await state.set_state(OperationState.choosing_to_wallet)
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CHOOSE TO WALLET ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(WalletCallback.filter(), OperationState.choosing_to_wallet)
@track_messages
async def set_to_wallet(
        cb: CallbackQuery,
        state: FSMContext,
        bot: Bot,
        callback_data: WalletCallback,
) -> None:
    wallet_id = callback_data.wallet_id
    async with get_async_session() as session:
        wallet = await get_wallet(session, wallet_id)
        wallet_number = wallet.wallet_number if wallet else wallet_id
    await state.update_data(
        to_wallet=wallet_id,
        state_history=[OperationState.choosing_to_wallet.state],
    )
    log.info("User %s: to_wallet=%s", cb.from_user.id, wallet_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    confirm_text = f"–í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª—ë–∫, <b>–∫—É–¥–∞</b> –ø–æ—Å—Ç—É–ø—è—Ç –¥–µ–Ω—å–≥–∏:\n‚úÖ <b>{wallet_number}</b>"
    await cb.message.edit_text(confirm_text, reply_markup=None)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    amount_message = await bot.send_message(cb.message.chat.id, _get_enter_amount_message())
    await state.update_data(amount_message_id=amount_message.message_id)

    await state.set_state(OperationState.entering_operation_amount)
    await cb.answer()
