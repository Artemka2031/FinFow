# -*- coding: utf-8 -*-
# FinFlow/src/bot/routers/income/income_router.py
"""–†–æ—É—Ç–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–∏–ø–∞ ¬´–ü—Ä–∏—Ö–æ–¥¬ª."""

from __future__ import annotations

from typing import Final, Tuple

from aiogram import Bot, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.bot.keyboards.article_kb import create_article_keyboard, ArticleCallback
from src.bot.keyboards.creditor_kb import create_creditor_keyboard, CreditorCallback
from src.bot.keyboards.founder_kb import create_founder_keyboard, FounderCallback
from src.bot.keyboards.project_kb import create_project_keyboard, ProjectCallback
from src.bot.keyboards.wallet_kb import create_wallet_keyboard, WalletCallback
from src.bot.state import OperationState
from src.bot.utils.legacy_messages import track_messages
from src.core.logger import configure_logger
from src.db import (
    get_async_session,
    get_articles,
    get_wallet,
    get_project,
    get_creditor,
    get_founder,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ù–°–¢–ê–ù–¢–´ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
EMOJI_INCOME:   Final = "üü¢"
EMOJI_ARTICLE:  Final = "üìã"
EMOJI_AMOUNT:   Final = "üí∞"

PROJECT_LABEL:  Final = "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
CREDITOR_LABEL: Final = "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞"
FOUNDER_LABEL:  Final = "–ù–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–¥–∏—Ç–µ–ª—è"

MSG_CHOOSE_WALLET:    Final = f"{EMOJI_INCOME} –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ—à–µ–ª—ë–∫ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</b>:"
MSG_CHOOSE_ARTICLE:   Final = f"{EMOJI_ARTICLE} –í—ã–±–µ—Ä–∏—Ç–µ <b>—Å—Ç–∞—Ç—å—é –ø—Ä–∏—Ö–æ–¥–∞</b>:"
MSG_ENTER_AMOUNT:     Final = f"{EMOJI_AMOUNT} –í–≤–µ–¥–∏—Ç–µ <b>—Å—É–º–º—É</b> –ø—Ä–∏—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):"
MSG_ENTER_ADD_INFO:   Final = (
    "üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
    f"({PROJECT_LABEL}, {CREDITOR_LABEL}, {FOUNDER_LABEL}) "
    "–∏–ª–∏ ¬´-¬ª –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:"
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–û–£–¢–ï–† –ò –õ–û–ì–ì–ï–† ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
router: Final = Router()
log = configure_logger(prefix="INCOME", color="green", level="INFO")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HELPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _choose_income_wallet_msg() -> Tuple[str, InlineKeyboardMarkup]:
    """–¢–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞."""
    async with get_async_session() as session:
        kb = await create_wallet_keyboard(session)
    return MSG_CHOOSE_WALLET, kb


async def _choose_income_article_msg(
    state: FSMContext,
) -> Tuple[str, InlineKeyboardMarkup]:
    """–¢–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—å–∏ –ø—Ä–∏—Ö–æ–¥–∞."""
    async with get_async_session() as session:
        kb = await create_article_keyboard(session, state=state, operation_type="–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")

        wallet_id = (await state.get_data()).get("income_wallet")
        if wallet_id:
            wallet = await get_wallet(session, wallet_id)
            wallet_number = wallet.wallet_number if wallet else wallet_id
            text = f"–í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª—ë–∫: <b>{wallet_number}</b>\n{MSG_CHOOSE_ARTICLE}"
        else:
            text = MSG_CHOOSE_ARTICLE

    return text, kb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–´–ë–û–† –ö–û–®–ï–õ–¨–ö–ê –ü–†–ò–•–û–î–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(WalletCallback.filter(), OperationState.choosing_income_wallet)
@track_messages
async def set_income_wallet(
    cb: CallbackQuery,
    state: FSMContext,
    bot: Bot,
    callback_data: WalletCallback,  # noqa: ARG001
) -> None:
    wallet_id = callback_data.wallet_id
    async with get_async_session() as session:
        wallet = await get_wallet(session, wallet_id)
        wallet_number = wallet.wallet_number if wallet else wallet_id

    await state.update_data(
        income_wallet=wallet_id,
        state_history=[OperationState.choosing_income_wallet.state],
    )
    log.info(
        f"–Æ–∑–µ—Ä {cb.from_user.full_name}: –≤—ã–±—Ä–∞–Ω income_wallet ‚Äì {wallet_id}, "
        f"–∫–æ—à–µ–ª—ë–∫ ‚Äì {wallet_number}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞—Ç—å–∏
    text, kb = await _choose_income_article_msg(state)
    msg = await bot.send_message(cb.message.chat.id, text, reply_markup=kb)
    await state.update_data(article_message_id=msg.message_id)

    await state.set_state(OperationState.choosing_income_article)
    await cb.answer()
    await cb.message.delete()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–´–ë–û–† –°–¢–ê–¢–¨–ò –ü–†–ò–•–û–î–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(ArticleCallback.filter(), OperationState.choosing_income_article)
@track_messages
async def set_income_article(
    cb: CallbackQuery,
    state: FSMContext,
    bot: Bot,
    callback_data: ArticleCallback,  # noqa: ARG001
) -> None:
    article_id = callback_data.article_id
    await state.update_data(
        income_article=article_id,
        state_history=[OperationState.choosing_income_article.state],
    )
    log.info(f"–Æ–∑–µ—Ä {cb.from_user.full_name}: –≤—ã–±—Ä–∞–Ω–∞ income_article ‚Äì {article_id}")

    async with get_async_session() as session:
        # –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –∫–æ—à–µ–ª—å–∫–∞
        articles = await get_articles(session)
        article = next((a for a in articles if a.article_id == article_id), None)
        wallet_id = (await state.get_data()).get("income_wallet")
        wallet = await get_wallet(session, wallet_id) if wallet_id else None
        wallet_number = wallet.wallet_number if wallet else wallet_id or "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        article_text = (
            f"‚Ññ{article.code} {article.short_name}" if article else str(article_id)
        )

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
    confirm_text = (
        f"–í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª—ë–∫: <b>{wallet_number}</b>\n"
        f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—å—è –ø—Ä–∏—Ö–æ–¥–∞:\n‚úÖ <b>{article_text}</b>"
    )
    await cb.message.edit_text(confirm_text, parse_mode="HTML", reply_markup=None)

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    async with get_async_session() as session:
        if article and article.code in {1, 27, 28, 32}:
            if article.code == 1:
                text = f"{EMOJI_ARTICLE} –í—ã–±–µ—Ä–∏—Ç–µ <b>{PROJECT_LABEL}</b>:"
                kb = await create_project_keyboard(session, state=state)
                next_state = OperationState.choosing_income_project
            elif article.code in {27, 32}:
                text = f"{EMOJI_ARTICLE} –í—ã–±–µ—Ä–∏—Ç–µ <b>{CREDITOR_LABEL}</b>:"
                kb = await create_creditor_keyboard(session, state=state)
                next_state = OperationState.choosing_income_creditor
            else:  # article.code == 28
                text = f"{EMOJI_ARTICLE} –í—ã–±–µ—Ä–∏—Ç–µ <b>{FOUNDER_LABEL}</b>:"
                kb = await create_founder_keyboard(session, state=state)
                next_state = OperationState.choosing_income_founder
        else:
            text, kb = MSG_ENTER_AMOUNT, None
            next_state = OperationState.entering_operation_amount

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç
    msg = await bot.send_message(cb.message.chat.id, text, reply_markup=kb)
    await state.update_data(
        additional_info_message_id=msg.message_id if kb else None,
        amount_message_id=msg.message_id if not kb else None,
    )
    await state.set_state(next_state)
    await cb.answer()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–´–ë–û–† –ü–†–û–ï–ö–¢–ê / –ö–†–ï–î–ò–¢–û–†–ê / –£–ß–†–ï–î–ò–¢–ï–õ–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _handle_entity(
    cb: CallbackQuery,
    state: FSMContext,
    bot: Bot,
    entity_id: int | str,
    label: str,
    fetch_fn,
    state_key: str,
) -> None:
    async with get_async_session() as session:
        entity = await fetch_fn(session, entity_id)
        entity_name = entity.name if entity else entity_id

    await state.update_data(**{state_key: entity_id})
    log.info(f"–Æ–∑–µ—Ä {cb.from_user.full_name}: –≤—ã–±—Ä–∞–Ω {state_key} ‚Äì {entity_id}")

    confirm_text = f"–í—ã–±—Ä–∞–Ω {label.lower()}:\n‚úÖ <b>{entity_name}</b>"
    await cb.message.edit_text(confirm_text, parse_mode="HTML", reply_markup=None)

    msg = await bot.send_message(cb.message.chat.id, MSG_ENTER_AMOUNT)
    await state.update_data(amount_message_id=msg.message_id)
    await state.set_state(OperationState.entering_operation_amount)
    await cb.answer()


@router.callback_query(ProjectCallback.filter(), OperationState.choosing_income_project)
@track_messages
async def set_income_project(
    cb: CallbackQuery,
    state: FSMContext,
    bot: Bot,
    callback_data: ProjectCallback,  # noqa: ARG001
) -> None:
    await _handle_entity(
        cb, state, bot, callback_data.project_id,
        PROJECT_LABEL, get_project, "income_project"
    )


@router.callback_query(CreditorCallback.filter(), OperationState.choosing_income_creditor)
@track_messages
async def set_income_creditor(
    cb: CallbackQuery,
    state: FSMContext,
    bot: Bot,
    callback_data: CreditorCallback,  # noqa: ARG001
) -> None:
    await _handle_entity(
        cb, state, bot, callback_data.creditor_id,
        CREDITOR_LABEL, get_creditor, "income_creditor"
    )


@router.callback_query(FounderCallback.filter(), OperationState.choosing_income_founder)
@track_messages
async def set_income_founder(
    cb: CallbackQuery,
    state: FSMContext,
    bot: Bot,
    callback_data: FounderCallback,  # noqa: ARG001
) -> None:
    await _handle_entity(
        cb, state, bot, callback_data.founder_id,
        FOUNDER_LABEL, get_founder, "income_founder"
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–í–û–î –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ò–ù–§–û ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(OperationState.choosing_income_additional_info)
@track_messages
async def set_income_additional_info(
    msg: Message,
    state: FSMContext,
    bot: Bot,
) -> None:
    info = msg.text.strip() or None
    await state.update_data(income_additional_info=info)
    log.info(f"–Æ–∑–µ—Ä {msg.from_user.full_name}: –≤–≤–µ–¥–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ ‚Äì {info}")

    await msg.delete()
    msg_amount = await bot.send_message(msg.chat.id, MSG_ENTER_AMOUNT)
    await state.update_data(amount_message_id=msg_amount.message_id)
    await state.set_state(OperationState.entering_operation_amount)
