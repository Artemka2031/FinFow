# -*- coding: utf-8 -*-
# FinFlow/src/bot/routers/income/confirm_income_router.py
"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ¬´–ü—Ä–∏—Ö–æ–¥¬ª.
"""

from __future__ import annotations

from typing import Final

from aiogram import Router, Bot, F
from aiogram.filters import StateFilter, BaseFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.bot.state import OperationState, reset_state
from src.bot.utils.legacy_messages import delete_key_messages, delete_tracked_messages, track_messages
from src.core.logger import configure_logger
from src.db import get_async_session, get_wallet, create_income, get_project, get_creditor, get_founder

router: Final = Router()
log = configure_logger(prefix="CONFIRM_INCOME", color="cyan", level="INFO")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CallbackData ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class IncomeConfirmCallback(CallbackData, prefix="confirm-income"):
    """CallbackData –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã."""
    action: str  # "yes" | "no"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def create_confirm_keyboard() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=IncomeConfirmCallback(action="yes").pack())
    kb.button(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=IncomeConfirmCallback(action="no").pack())
    kb.adjust(2)
    return kb


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def format_operation_message(data: dict) -> str:
    wallet_id = data.get("income_wallet")
    article_id = data.get("income_article", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    amount = data.get("operation_amount", 0)
    comment = data.get("operation_comment", "‚Äî")
    op_date = data.get("operation_date", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    async with get_async_session() as session:
        wallet = await get_wallet(session, wallet_id)
        wallet_number = wallet.wallet_number if wallet else wallet_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    additional_info = ""
    if data.get("income_project"):
        project = await get_project(session, data["income_project"])
        additional_info = f"–ü—Ä–æ–µ–∫—Ç: <b>{project.name if project else data['income_project']}</b>\n"
    elif data.get("income_creditor"):
        creditor = await get_creditor(session, data["income_creditor"])
        additional_info = f"–ö—Ä–µ–¥–∏—Ç–æ—Ä: <b>{creditor.name if creditor else data['income_creditor']}</b>\n"
    elif data.get("income_founder"):
        founder = await get_founder(session, data["income_founder"])
        additional_info = f"–£—á—Ä–µ–¥–∏—Ç–µ–ª—å: <b>{founder.name if founder else data['income_founder']}</b>\n"

    return (
        f"–î–∞—Ç–∞: <code>{op_date}</code>\n"
        f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: <b>–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ</b>\n"
        f"–ö–æ—à–µ–ª—ë–∫: <b>{wallet_number}</b>\n"
        f"–°—Ç–∞—Ç—å—è: <b>{article_id}</b>\n"
        f"{additional_info if additional_info else ''}"
        f"–í–≤–µ–¥—ë–Ω–Ω–∞—è <b>—Å—É–º–º–∞</b>: <code>{amount}</code>\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment}</i>"
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Custom Filter ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class IncomeOperationFilter(BaseFilter):
    async def __call__(self, message: Message, state: FSMContext) -> bool:
        data = await state.get_data()
        return data.get("operation_type") == "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 8: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(StateFilter(OperationState.entering_operation_comment), IncomeOperationFilter())
@track_messages
async def handle_comment(msg: Message, state: FSMContext, bot: Bot) -> None:
    comment = (msg.text or "").strip()
    await state.update_data(operation_comment=comment)

    data = await state.get_data()
    chat_id = msg.chat.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await msg.delete()
    await bot.delete_message(chat_id, data.get("comment_message_id") - 1)
    await bot.delete_message(chat_id, data.get("date_message_id"))
    await delete_tracked_messages(bot, state, chat_id)
    await delete_key_messages(bot, state, chat_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    operation_info = await format_operation_message(data)
    confirm_text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n{operation_info}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ‚úÖ"
    sent_message = await bot.send_message(
        chat_id=chat_id,
        text=confirm_text,
        reply_markup=create_confirm_keyboard().as_markup(),
        parse_mode="HTML"
    )
    await state.update_data(confirm_message_id=sent_message.message_id)
    await state.set_state(OperationState.confirming_operation)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ YES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(
    IncomeConfirmCallback.filter(F.action == "yes"),
    OperationState.confirming_operation
)
@track_messages
async def confirm_yes(
        cb: CallbackQuery, state: FSMContext, bot: Bot, callback_data: IncomeConfirmCallback
) -> None:
    data = await state.get_data()
    chat_id, message_id = cb.message.chat.id, cb.message.message_id
    info = await format_operation_message(data)

    log.info("User %s –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é", cb.from_user.id)
    try:
        async with get_async_session() as session:
            income_data = {
                "recording_date": data.get("recording_date"),
                "operation_date": data.get("operation_date"),
                "income_wallet": data.get("income_wallet"),
                "income_article": data.get("income_article"),
                "income_project": data.get("income_project"),
                "income_creditor": data.get("income_creditor"),
                "income_founder": data.get("income_founder"),
                "operation_amount": data.get("operation_amount"),
                "operation_comment": data.get("operation_comment"),
            }
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ None –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
            income_data = {k: v for k, v in income_data.items() if v is not None}
            income_obj = await create_income(session, income_data)

            log.info(
                f"–°–æ–∑–¥–∞–Ω Income {income_obj.transaction_id}, –î–∞—Ç–∞: {income_obj.operation_date}, "
                f"–ö–æ—à–µ–ª—ë–∫: {income_obj.income_wallet}, –°—É–º–º–∞: {income_obj.operation_amount}"
            )

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ\n{info}",
            parse_mode="HTML",
        )
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é: üîÑ")
        await reset_state(state)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n{info}\n\n{e} ‚ùå",
            parse_mode="HTML",
        )

    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ NO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(
    IncomeConfirmCallback.filter(F.action == "no"),
    OperationState.confirming_operation
)
@track_messages
async def confirm_no(
        cb: CallbackQuery, state: FSMContext, bot: Bot, callback_data: IncomeConfirmCallback
) -> None:
    data = await state.get_data()
    chat_id, message_id = cb.message.chat.id, cb.message.message_id
    info = await format_operation_message(data)

    log.info("User %s –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é", cb.from_user.id)

    await delete_tracked_messages(bot, state, chat_id)
    await delete_key_messages(bot, state, chat_id)
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ:\n{info} üö´",
        parse_mode="HTML",
    )
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é: üîÑ")
    await reset_state(state)
    await cb.answer()