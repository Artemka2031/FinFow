# -*- coding: utf-8 -*-
# FinFlow/src/bot/routers/outcome/confirm_outcome_router.py
"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ¬´–í—ã–±—ã—Ç–∏–µ¬ª.
"""

from __future__ import annotations

from typing import Final

from aiogram import Router, Bot, F
from aiogram.filters import StateFilter, BaseFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.bot.state import OperationState, reset_state
from src.bot.utils.legacy_messages import delete_key_messages, delete_tracked_messages, track_messages
from src.core.logger import configure_logger
from src.db import get_async_session, get_wallet, create_outcome, get_project, get_creditor, get_article, \
    get_contractor, get_material, get_employee, get_founder

router: Final = Router()
log = configure_logger(prefix="CONFIRM_OUTCOME", color="red", level="INFO")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CallbackData ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class OutcomeConfirmCallback(CallbackData, prefix="confirm-outcome"):
    """CallbackData –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã."""
    action: str  # "yes" | "no"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def create_confirm_keyboard() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=OutcomeConfirmCallback(action="yes").pack())
    kb.button(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=OutcomeConfirmCallback(action="no").pack())
    kb.adjust(2)
    return kb


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def format_operation_message(data: dict) -> str:
    outcome_wallet = data.get("outcome_wallet")
    outcome_creditor = data.get("outcome_creditor")
    outcome_chapter = data.get("outcome_chapter")
    outcome_article = data.get("outcome_article")
    amount = data.get("operation_amount", 0)
    comment = data.get("operation_comment", "‚Äî")
    op_date = data.get("operation_date", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    async with get_async_session() as session:
        if outcome_wallet:
            wallet = await get_wallet(session, outcome_wallet)
            source = f"–ö–æ—à–µ–ª—ë–∫: <b>{wallet.wallet_number if wallet else outcome_wallet}</b>\n"
        elif outcome_creditor:
            creditor = await get_creditor(session, outcome_creditor)
            source = f"–ö—Ä–µ–¥–∏—Ç–æ—Ä: <b>{creditor.name if creditor else outcome_creditor}</b>\n"
        else:
            source = "–ò—Å—Ç–æ—á–Ω–∏–∫: <b>–ù–µ —É–∫–∞–∑–∞–Ω</b>\n"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
        article_name = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        if outcome_article:
            article = await get_article(session, outcome_article)
            article_name = article.name if article else str(outcome_article)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        additional_info = ""
        if outcome_chapter:
            project = await get_project(session, outcome_chapter)
            additional_info = f"–ü—Ä–æ–µ–∫—Ç: <b>{project.name if project else outcome_chapter}</b>\n"
        if data.get("contractor_id"):
            contractor = await get_contractor(session, data["contractor_id"])
            additional_info += f"–ü–æ–¥—Ä—è–¥—á–∏–∫: <b>{contractor.name if contractor else data['contractor_id']}</b>\n"
        elif data.get("material_id"):
            material = await get_material(session, data["material_id"])
            additional_info += f"–ú–∞—Ç–µ—Ä–∏–∞–ª: <b>{material.name if material else data['material_id']}</b>\n"
        elif data.get("employee_id"):
            employee = await get_employee(session, data["employee_id"])
            additional_info += f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{employee.name if employee else data['employee_id']}</b>\n"
        elif data.get("outcome_article_creditor"):
            additional_info += f"–ö—Ä–µ–¥–∏—Ç–æ—Ä (—Å—Ç–∞—Ç—å—è 29): <b>{data['outcome_article_creditor']}</b>\n"
        elif data.get("outcome_founder_id"):
            founder = await get_founder(session, data["outcome_founder_id"])
            additional_info += f"–£—á—Ä–µ–¥–∏—Ç–µ–ª—å: <b>{founder.name if founder else data['outcome_founder_id']}</b>\n"

    return (
        f"–î–∞—Ç–∞: <code>{op_date}</code>\n"
        f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: <b>–í—ã–±—ã—Ç–∏–µ</b>\n"
        f"{source}"
        f"–†–∞–∑–¥–µ–ª: <b>{'–ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º' if outcome_chapter else '–û–±—â–∏–µ' if not outcome_chapter else '–ù–µ —É–∫–∞–∑–∞–Ω'}</b>\n"
        f"–°—Ç–∞—Ç—å—è: <b>{article_name}</b>\n"
        f"{additional_info if additional_info else ''}"
        f"–í–≤–µ–¥—ë–Ω–Ω–∞—è <b>—Å—É–º–º–∞</b>: <code>{amount}</code>\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment}</i>"
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Custom Filter ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class OutcomeOperationFilter(BaseFilter):
    async def __call__(self, message: Message, state: FSMContext) -> bool:
        data = await state.get_data()
        return data.get("operation_type") == "–í—ã–±—ã—Ç–∏–µ"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 8: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(StateFilter(OperationState.entering_operation_comment), OutcomeOperationFilter())
@track_messages
async def handle_comment(msg: Message, state: FSMContext, bot: Bot) -> None:
    comment = (msg.text or "").strip()
    await state.update_data(operation_comment=comment)

    data = await state.get_data()
    chat_id = msg.chat.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await msg.delete()
    await delete_tracked_messages(bot, state, chat_id)
    await delete_key_messages(bot, state, chat_id, exclude_message_ids=[
        data.get("summary_message_id"),
        data.get("amount_message_id"),
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    operation_info = await format_operation_message(data)
    confirm_text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n{operation_info}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ‚úÖ"
    sent_message = await bot.send_message(
        chat_id=chat_id,
        text=confirm_text,
        reply_markup=create_confirm_keyboard().as_markup(),
        parse_mode="HTML"
    )
    await state.update_data(confirm_message_id=sent_message.message_id)
    await state.set_state(OperationState.confirming_operation)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ YES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(
    OutcomeConfirmCallback.filter(F.action == "yes"),
    OperationState.confirming_operation
)
@track_messages
async def confirm_yes(
        cb: CallbackQuery, state: FSMContext, bot: Bot, callback_data: OutcomeConfirmCallback
) -> None:
    data = await state.get_data()
    chat_id, message_id = cb.message.chat.id, cb.message.message_id
    info = await format_operation_message(data)

    log.info("User %s –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é", cb.from_user.id)
    try:
        async with get_async_session() as session:
            outcome_data = {
                "recording_date": data.get("recording_date"),
                "operation_date": data.get("operation_date"),
                "outcome_wallet": data.get("outcome_wallet"),
                "outcome_creditor": data.get("outcome_creditor"),
                "outcome_chapter": data.get("outcome_chapter"),
                "outcome_article": data.get("outcome_article"),
                "contractor_name": data.get("contractor_id"),
                "material_name": data.get("material_id"),
                "employee_name": data.get("employee_id"),
                "outcome_founder": data.get("outcome_founder_id"),
                "outcome_article_creditor": data.get("outcome_article_creditor"),
                "operation_amount": -abs(data.get("operation_amount", 0)),  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                "operation_comment": data.get("operation_comment"),
            }
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ None –∑–Ω–∞—á–µ–Ω–∏—è
            outcome_data = {k: v for k, v in outcome_data.items() if v is not None}
            outcome_obj = await create_outcome(session, outcome_data)

            log.info(
                f"–°–æ–∑–¥–∞–Ω Outcome {outcome_obj.transaction_id}, –î–∞—Ç–∞: {outcome_obj.operation_date}, "
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: {outcome_obj.outcome_wallet or outcome_obj.outcome_creditor}, –°—É–º–º–∞: {outcome_obj.operation_amount}"
            )

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"–í—ã–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ\n{info}",
            parse_mode="HTML",
        )
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é: üîÑ")
        await reset_state(state)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—ã–±—ã—Ç–∏—è:\n{info}\n\n{e} ‚ùå",
            parse_mode="HTML",
        )

    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ NO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(
    OutcomeConfirmCallback.filter(F.action == "no"),
    OperationState.confirming_operation
)
@track_messages
async def confirm_no(
        cb: CallbackQuery, state: FSMContext, bot: Bot, callback_data: OutcomeConfirmCallback
) -> None:
    data = await state.get_data()
    chat_id, message_id = cb.message.chat.id, cb.message.message_id
    info = await format_operation_message(data)

    log.info("User %s –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é", cb.from_user.id)

    await delete_tracked_messages(bot, state, chat_id)
    await delete_key_messages(bot, state, chat_id)
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ:\n{info} üö´",
        parse_mode="HTML",
    )
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é: üîÑ")
    await reset_state(state)
    await cb.answer()
